package com.project.tableforyou.domain.restaurant.controller;import com.project.tableforyou.domain.reservation.dto.QueueReservationResDto;import com.project.tableforyou.domain.reservation.service.QueueReservationService;import com.project.tableforyou.domain.restaurant.api.PublicRestaurantApi;import com.project.tableforyou.domain.restaurant.dto.RestaurantResponseDto;import com.project.tableforyou.domain.restaurant.service.RestaurantService;import com.project.tableforyou.domain.visit.service.VisitService;import com.project.tableforyou.handler.exceptionHandler.error.ErrorCode;import com.project.tableforyou.handler.exceptionHandler.exception.CustomException;import com.project.tableforyou.utils.api.ApiUtil;import com.project.tableforyou.utils.redis.RedisUtil;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import lombok.RequiredArgsConstructor;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.data.web.PageableDefault;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.io.IOException;import java.util.List;import static com.project.tableforyou.utils.redis.RedisProperties.RESERVATION_KEY_PREFIX;@RestController@RequestMapping("/public/restaurants")@RequiredArgsConstructorpublic class PublicRestaurantController implements PublicRestaurantApi {    private final RestaurantService restaurantService;    private final QueueReservationService queueReservationService;    private final VisitService visitService;    private final RedisUtil redisUtil;    /* 가게 불러오기 */    @Override    @GetMapping("/{restaurantId}")    public ResponseEntity<?> readRestaurant(@PathVariable(name = "restaurantId") Long restaurantId) {        return ResponseEntity.ok(restaurantService.readRestaurant(restaurantId));    }    /* 전체 가게 불러오기. 페이징 처리 + 검색 기능 */    @Override    @GetMapping    public ResponseEntity<?> readAllRestaurant(            @PageableDefault(size = 20, sort = "rating", direction = Sort.Direction.DESC) Pageable pageable,            @RequestParam(required = false, value = "type") String type,            @RequestParam(required = false, value = "search-keyword") String searchKeyword,            @RequestParam(required = false, value = "sort-by", defaultValue = "rating") String sortBy,            @RequestParam(required = false, value = "direction", defaultValue = "DESC") String direction) {        // rating가 아닌 다른 정렬 방식 선택        Sort sort = Sort.by(Sort.Direction.fromString(direction), sortBy);        Pageable sortedPageable = PageRequest.of(pageable.getPageNumber(), pageable.getPageSize(), sort);        if (type == null) {            return ResponseEntity.ok(restaurantService.readAllRestaurant(sortedPageable));        }        return switch (type) {            case "restaurant" -> ResponseEntity.ok(restaurantService.restaurantPageSearchList(searchKeyword, sortedPageable));            case "region" -> ResponseEntity.ok(restaurantService.readAllRestaurantByRegion(searchKeyword, sortedPageable));            case "location" -> ResponseEntity.ok(restaurantService.readAllRestaurantByLocation(searchKeyword, sortedPageable));            case "food" -> ResponseEntity.ok(restaurantService.readAllRestaurantByFoodType(searchKeyword, sortedPageable));            default -> throw new CustomException(ErrorCode.INVALID_PARAMETER);        };    }    /* 가게 예약자 수 불러오기 */    @Override    @GetMapping("/{restaurantId}/waiting")    public ResponseEntity<?> waiting(@PathVariable(name = "restaurantId") Long restaurantId) {        return ResponseEntity.ok(ApiUtil.from(queueReservationService.getQueueWaitingCount(restaurantId)));    }    /* 좌석 업데이트 (forward처리를 하는 주소.) */    @Override    @PatchMapping("/{restaurantId}/update-used-seats")    public ResponseEntity<?> updateFullUsedSeats(@PathVariable(name = "restaurantId") Long restaurantId,                                    @RequestParam("increase") boolean increase,                                    HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        int value = increase ? 1 : -1;        String key = RESERVATION_KEY_PREFIX + "queue:" + restaurantId;        if (value == -1 && redisUtil.hashSize(key) != 0) {   // 좌석이 다 차서 예약자에서 인원을 가져올 때. (인원이 줄면) redis값을 가져와 있는지 확인한 후 보내기            List<QueueReservationResDto> reservations =                    queueReservationService.getQueueReservations(restaurantId, null, null);            String username = queueReservationService.decreaseBooking(reservations, restaurantId);            visitService.saveVisitRestaurant(username, restaurantId);   // 사용자가 방문 가게 목록에 저장            return ResponseEntity.ok(ApiUtil.from(username + "님 입장"));        }        else {                                                          // 좌석이 덜 찼을 때            restaurantService.updateUsedSeats(restaurantId, value);            return ResponseEntity.ok(ApiUtil.from("가게 좌석 변경 성공."));        }    }}